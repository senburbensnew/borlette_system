// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BorletteRepository.DAOEFC.EFC;

public partial class BorletteContext : DbContext
{
    public BorletteContext()
    {
    }

    public BorletteContext(DbContextOptions<BorletteContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TblMiseJoueur> TblMiseJoueurs { get; set; }

    public virtual DbSet<TblProfession> TblProfessions { get; set; }

    public virtual DbSet<TblRefProfilUtilisateur> TblRefProfilUtilisateurs { get; set; }

    public virtual DbSet<TblRefSensTransaction> TblRefSensTransactions { get; set; }

    public virtual DbSet<TblRefStatutMise> TblRefStatutMises { get; set; }

    public virtual DbSet<TblRefStatutTirage> TblRefStatutTirages { get; set; }

    public virtual DbSet<TblRefStatutUtilisateur> TblRefStatutUtilisateurs { get; set; }

    public virtual DbSet<TblTirage> TblTirages { get; set; }

    public virtual DbSet<TblTransaction> TblTransactions { get; set; }

    public virtual DbSet<TblTypeTransaction> TblTypeTransactions { get; set; }

    public virtual DbSet<TblUtilisateur> TblUtilisateurs { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-AK9F2A6\\SQLEXPRESS;Initial Catalog=BORLETTE;Persist Security Info=True;User ID=sa;Password=solutions;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TblMiseJoueur>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Cls_MiseJoueur");

            entity.HasOne(d => d.IdTirageNavigation).WithMany(p => p.TblMiseJoueurs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_MiseJoueur_Tbl_Tirage");

            entity.HasOne(d => d.IdUtilisateurNavigation).WithMany(p => p.TblMiseJoueurs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_MiseJoueur_Tbl_Utilisateur");
        });

        modelBuilder.Entity<TblProfession>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblRefProfilUtilisateur>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblRefSensTransaction>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblRefStatutMise>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblRefStatutTirage>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblRefStatutUtilisateur>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblTirage>(entity =>
        {
            entity.HasOne(d => d.IdStatutTirageNavigation).WithMany(p => p.TblTirages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_Tirage_Tbl_RefStatutTirage");
        });

        modelBuilder.Entity<TblTransaction>(entity =>
        {
            entity.HasOne(d => d.IdMiseJoueurNavigation).WithMany(p => p.TblTransactions).HasConstraintName("FK_Tbl_Transaction_Tbl_MiseJoueur");

            entity.HasOne(d => d.IdSensTransactionNavigation).WithMany(p => p.TblTransactions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_Transaction_Tbl_RefSensTransaction");

            entity.HasOne(d => d.IdUtilisateurNavigation).WithMany(p => p.TblTransactions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_Transaction_Tbl_Utilisateur");
        });

        modelBuilder.Entity<TblTypeTransaction>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<TblUtilisateur>(entity =>
        {
            entity.Property(e => e.Sexe).IsFixedLength();

            entity.HasOne(d => d.IdProfilNavigation).WithMany(p => p.TblUtilisateurs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_Utilisateur_Tbl_RefProfilUtilisateur");

            entity.HasOne(d => d.IdStatutNavigation).WithMany(p => p.TblUtilisateurs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tbl_Utilisateur_Tbl_RefStatutUtilisateur");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}